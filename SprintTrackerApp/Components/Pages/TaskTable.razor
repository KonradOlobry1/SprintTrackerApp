@page "/"
@using DummyProject.Models
@using SprintTrackerApp.Components.Modals
@using TaskStatus = DummyProject.Models.TaskStatus
@using SprintTrackerApp.Data
@inject TaskService TaskService
@inject SprintService SprintService
@inject NavigationManager Navigation
@inject IJSRuntime JS

@if (showPopup)
{
    <NoSprintFoundPopup OnCreateNewSprint="CreateNewSprint" OnLoadPreviousSprint="LoadPreviousSprint" />
}
else
{
    <h3>@currentSprint?.Name</h3>
    <table class="table ">
        <thead>
            <tr>
                <th>Task</th>
                @for (var i = 0; i < days?.Length; i++)
                {
                    <th>@days[i]</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var task in tasks)
            {
                <tr>
                    <td class="task-column">
                        <div class="card @GetCardBackgroundClass(task.Status)" style="width: 18rem;">
                            <div class="card-body">
                                <h5 class="card-title">@task.Title</h5>
                                <h6 class="card-subtitle mb-2 text-body-secondary">@task.Status</h6>
                                <p class="card-text">@task.Description</p>
                                <button type="button" class="btn btn-primary btn-sm" @onclick="() => EditTask(task)">Edit</button>
                                <button type="button" class="btn btn-danger btn-sm" @onclick="() => DeleteTask(task)">Delete</button>
                            </div>
                        </div>
                    </td>
                    @for (var i = 0; i < days?.Length; i++)
                    {
                        <td>
                            @RenderTaskStatus(task, i)
                        </td>
                    }
                </tr>
            }

            <tr>
                <td>
                    <div class="dropdown">
                        <button class="w-100 btn btn-success btn-sm bi bi-plus-square dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"> Add</button>
                        <ul class="dropdown-menu">
                            <li><button type="button" class="dropdown-item" @onclick="() => CreateTask()">Add new task</button></li>
                            <li><button type="button" class="dropdown-item" >Add existing task</button></li>
                        </ul>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>

    <CreateTaskModal @ref="createTaskModal" OnTaskCreated="ReloadTasks" />
    <EditTaskModal @ref="editTaskModal" TaskToEdit="@taskToEdit" OnTaskEdited="ReloadTasks" />   
    <DeleteTaskModal @ref="deleteTaskModal" TaskToDelete="@taskToDelete" OnTaskDeleted="ReloadTasks" />
}

@code {
    private List<TaskItem> tasks = new();
    private SprintItem? currentSprint = new();
    private string[]? days;
    private bool showPopup = false;
    private TaskItem? taskToDelete;
    private TaskItem taskToEdit = new();
    private EditTaskModal editTaskModal = new();
    private CreateTaskModal createTaskModal = new();
	private DeleteTaskModal deleteTaskModal = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            tasks = await TaskService.GetTasksAsync();
            currentSprint = await SprintService.GetCurrentSprintsAsync();

            if (currentSprint == null)
            {
                showPopup = true;
            }
            else
            {
                days = new string[SprintService.GetSprintDuration(currentSprint)];
                var startDate = currentSprint.StartDate;
                for (int i = 0; i < days.Length; i++)
                {
                    days[i] = startDate.AddDays(i).ToString("MM/dd");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private async Task HandleProgressUpdated((TaskItem task, TaskProgress progress) update)
    {
        await TaskService.UpdateTaskProgressAsync(update.task, update.progress);
        StateHasChanged();
    }

    private string GetStatusForDay(TaskItem task, int day)
    {
        if (currentSprint == null) return "NotStarted";

        var currentDate = currentSprint.StartDate.AddDays(day);
        if (currentDate < DateTime.Now) return "Completed";
        if (currentDate == DateTime.Now) return "InProgress";
        return "NotStarted";
    }

    private void CreateNewSprint()
    {
        Navigation.NavigateTo("/create-sprint");
    }

    private void CreateNewTask()
    {
        Navigation.NavigateTo("/create-task");
    }

    private void LoadPreviousSprint()
    {
		//TODO: Implement loading previous sprint
        showPopup = false;
    }

    private void SetTaskToDelete(TaskItem task)
    {
        taskToDelete = task;
    }

    private async Task DeleteConfirmed()
    {
        if (taskToDelete == null) return;

        await TaskService.DeleteTaskByIdAsync(taskToDelete.Id);
        tasks.Remove(taskToDelete);

        StateHasChanged();
    }

    private string GetCardBackgroundClass(TaskStatus status)
    {
        return status switch
        {
            TaskStatus.Created => "text-bg-secondary",
            TaskStatus.Open => "text-bg-primary",
            TaskStatus.InProgress => "text-bg-warning",
            TaskStatus.InReview => "text-bg-info",
            TaskStatus.Completed => "text-bg-success",
            TaskStatus.Deffered => "text-bg-dark",
            TaskStatus.Blocked => "text-bg-danger",
            _ => "text-bg-light"
        };
    }

    private async Task ReloadTasks()
    {
        tasks = await TaskService.GetTasksAsync();
        StateHasChanged();
    }

    private async Task EditTask(TaskItem task)
    {
        taskToEdit = task;
        await JS.InvokeVoidAsync("modalHelper.showModal", "editTaskModal");
    }

    private async Task DeleteTask(TaskItem task)
    {
        taskToDelete = task;
        await JS.InvokeVoidAsync("modalHelper.showModal", "deleteTaskModal");
    }

    private async Task CreateTask()
    {
        await JS.InvokeVoidAsync("modalHelper.showModal", "createTaskModal");
    }
}